Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> TRUE
Rule 2     formula -> FALSE
Rule 3     formula -> AG formula
Rule 4     formula -> EG formula
Rule 5     formula -> AX formula
Rule 6     formula -> EX formula
Rule 7     formula -> AF formula
Rule 8     formula -> EF formula
Rule 9     formula -> E L_SQUARE formula U formula R_SQUARE
Rule 10    formula -> A L_SQUARE formula U formula R_SQUARE
Rule 11    formula -> PROP_VARIABLE
Rule 12    formula -> formula AND formula
Rule 13    formula -> formula OR formula
Rule 14    formula -> formula IMPLIES formula
Rule 15    formula -> NOT formula
Rule 16    formula -> L_PAREN formula R_PAREN

Terminals, with rules where they appear

A                    : 10
AF                   : 7
AG                   : 3
AND                  : 12
AX                   : 5
E                    : 9
EF                   : 8
EG                   : 4
EX                   : 6
FALSE                : 2
IMPLIES              : 14
L_PAREN              : 16
L_SQUARE             : 9 10
NOT                  : 15
OR                   : 13
PROP_VARIABLE        : 11
R_PAREN              : 16
R_SQUARE             : 9 10
TRUE                 : 1
U                    : 9 10
error                : 

Nonterminals, with rules where they appear

formula              : 3 4 5 6 7 8 9 9 10 10 12 12 13 13 14 14 15 16 0

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 1

state 1

    (0) S' -> formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             shift and go to state 15
    OR              shift and go to state 16
    IMPLIES         shift and go to state 17


state 2

    (1) formula -> TRUE .

    AND             reduce using rule 1 (formula -> TRUE .)
    OR              reduce using rule 1 (formula -> TRUE .)
    IMPLIES         reduce using rule 1 (formula -> TRUE .)
    $end            reduce using rule 1 (formula -> TRUE .)
    R_PAREN         reduce using rule 1 (formula -> TRUE .)
    U               reduce using rule 1 (formula -> TRUE .)
    R_SQUARE        reduce using rule 1 (formula -> TRUE .)


state 3

    (2) formula -> FALSE .

    AND             reduce using rule 2 (formula -> FALSE .)
    OR              reduce using rule 2 (formula -> FALSE .)
    IMPLIES         reduce using rule 2 (formula -> FALSE .)
    $end            reduce using rule 2 (formula -> FALSE .)
    R_PAREN         reduce using rule 2 (formula -> FALSE .)
    U               reduce using rule 2 (formula -> FALSE .)
    R_SQUARE        reduce using rule 2 (formula -> FALSE .)


state 4

    (3) formula -> AG . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 18

state 5

    (4) formula -> EG . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 19

state 6

    (5) formula -> AX . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 20

state 7

    (6) formula -> EX . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 21

state 8

    (7) formula -> AF . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 22

state 9

    (8) formula -> EF . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 23

state 10

    (9) formula -> E . L_SQUARE formula U formula R_SQUARE

    L_SQUARE        shift and go to state 24


state 11

    (10) formula -> A . L_SQUARE formula U formula R_SQUARE

    L_SQUARE        shift and go to state 25


state 12

    (11) formula -> PROP_VARIABLE .

    AND             reduce using rule 11 (formula -> PROP_VARIABLE .)
    OR              reduce using rule 11 (formula -> PROP_VARIABLE .)
    IMPLIES         reduce using rule 11 (formula -> PROP_VARIABLE .)
    $end            reduce using rule 11 (formula -> PROP_VARIABLE .)
    R_PAREN         reduce using rule 11 (formula -> PROP_VARIABLE .)
    U               reduce using rule 11 (formula -> PROP_VARIABLE .)
    R_SQUARE        reduce using rule 11 (formula -> PROP_VARIABLE .)


state 13

    (15) formula -> NOT . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 26

state 14

    (16) formula -> L_PAREN . formula R_PAREN
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 27

state 15

    (12) formula -> formula AND . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 28

state 16

    (13) formula -> formula OR . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 29

state 17

    (14) formula -> formula IMPLIES . formula
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 30

state 18

    (3) formula -> AG formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 3 (formula -> AG formula .)
    OR              reduce using rule 3 (formula -> AG formula .)
    IMPLIES         reduce using rule 3 (formula -> AG formula .)
    $end            reduce using rule 3 (formula -> AG formula .)
    R_PAREN         reduce using rule 3 (formula -> AG formula .)
    U               reduce using rule 3 (formula -> AG formula .)
    R_SQUARE        reduce using rule 3 (formula -> AG formula .)

  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! IMPLIES         [ shift and go to state 17 ]


state 19

    (4) formula -> EG formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 4 (formula -> EG formula .)
    OR              reduce using rule 4 (formula -> EG formula .)
    IMPLIES         reduce using rule 4 (formula -> EG formula .)
    $end            reduce using rule 4 (formula -> EG formula .)
    R_PAREN         reduce using rule 4 (formula -> EG formula .)
    U               reduce using rule 4 (formula -> EG formula .)
    R_SQUARE        reduce using rule 4 (formula -> EG formula .)

  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! IMPLIES         [ shift and go to state 17 ]


state 20

    (5) formula -> AX formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 5 (formula -> AX formula .)
    OR              reduce using rule 5 (formula -> AX formula .)
    IMPLIES         reduce using rule 5 (formula -> AX formula .)
    $end            reduce using rule 5 (formula -> AX formula .)
    R_PAREN         reduce using rule 5 (formula -> AX formula .)
    U               reduce using rule 5 (formula -> AX formula .)
    R_SQUARE        reduce using rule 5 (formula -> AX formula .)

  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! IMPLIES         [ shift and go to state 17 ]


state 21

    (6) formula -> EX formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 6 (formula -> EX formula .)
    OR              reduce using rule 6 (formula -> EX formula .)
    IMPLIES         reduce using rule 6 (formula -> EX formula .)
    $end            reduce using rule 6 (formula -> EX formula .)
    R_PAREN         reduce using rule 6 (formula -> EX formula .)
    U               reduce using rule 6 (formula -> EX formula .)
    R_SQUARE        reduce using rule 6 (formula -> EX formula .)

  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! IMPLIES         [ shift and go to state 17 ]


state 22

    (7) formula -> AF formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 7 (formula -> AF formula .)
    OR              reduce using rule 7 (formula -> AF formula .)
    IMPLIES         reduce using rule 7 (formula -> AF formula .)
    $end            reduce using rule 7 (formula -> AF formula .)
    R_PAREN         reduce using rule 7 (formula -> AF formula .)
    U               reduce using rule 7 (formula -> AF formula .)
    R_SQUARE        reduce using rule 7 (formula -> AF formula .)

  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! IMPLIES         [ shift and go to state 17 ]


state 23

    (8) formula -> EF formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 8 (formula -> EF formula .)
    OR              reduce using rule 8 (formula -> EF formula .)
    IMPLIES         reduce using rule 8 (formula -> EF formula .)
    $end            reduce using rule 8 (formula -> EF formula .)
    R_PAREN         reduce using rule 8 (formula -> EF formula .)
    U               reduce using rule 8 (formula -> EF formula .)
    R_SQUARE        reduce using rule 8 (formula -> EF formula .)

  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]
  ! IMPLIES         [ shift and go to state 17 ]


state 24

    (9) formula -> E L_SQUARE . formula U formula R_SQUARE
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 31

state 25

    (10) formula -> A L_SQUARE . formula U formula R_SQUARE
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 32

state 26

    (15) formula -> NOT formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 15 (formula -> NOT formula .)
    OR              reduce using rule 15 (formula -> NOT formula .)
    $end            reduce using rule 15 (formula -> NOT formula .)
    R_PAREN         reduce using rule 15 (formula -> NOT formula .)
    U               reduce using rule 15 (formula -> NOT formula .)
    R_SQUARE        reduce using rule 15 (formula -> NOT formula .)
    IMPLIES         shift and go to state 17

  ! IMPLIES         [ reduce using rule 15 (formula -> NOT formula .) ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]


state 27

    (16) formula -> L_PAREN formula . R_PAREN
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    R_PAREN         shift and go to state 33
    AND             shift and go to state 15
    OR              shift and go to state 16
    IMPLIES         shift and go to state 17


state 28

    (12) formula -> formula AND formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 12 (formula -> formula AND formula .)
    OR              reduce using rule 12 (formula -> formula AND formula .)
    $end            reduce using rule 12 (formula -> formula AND formula .)
    R_PAREN         reduce using rule 12 (formula -> formula AND formula .)
    U               reduce using rule 12 (formula -> formula AND formula .)
    R_SQUARE        reduce using rule 12 (formula -> formula AND formula .)
    IMPLIES         shift and go to state 17

  ! IMPLIES         [ reduce using rule 12 (formula -> formula AND formula .) ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]


state 29

    (13) formula -> formula OR formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    OR              reduce using rule 13 (formula -> formula OR formula .)
    $end            reduce using rule 13 (formula -> formula OR formula .)
    R_PAREN         reduce using rule 13 (formula -> formula OR formula .)
    U               reduce using rule 13 (formula -> formula OR formula .)
    R_SQUARE        reduce using rule 13 (formula -> formula OR formula .)
    AND             shift and go to state 15
    IMPLIES         shift and go to state 17

  ! AND             [ reduce using rule 13 (formula -> formula OR formula .) ]
  ! IMPLIES         [ reduce using rule 13 (formula -> formula OR formula .) ]
  ! OR              [ shift and go to state 16 ]


state 30

    (14) formula -> formula IMPLIES formula .
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    AND             reduce using rule 14 (formula -> formula IMPLIES formula .)
    OR              reduce using rule 14 (formula -> formula IMPLIES formula .)
    $end            reduce using rule 14 (formula -> formula IMPLIES formula .)
    R_PAREN         reduce using rule 14 (formula -> formula IMPLIES formula .)
    U               reduce using rule 14 (formula -> formula IMPLIES formula .)
    R_SQUARE        reduce using rule 14 (formula -> formula IMPLIES formula .)
    IMPLIES         shift and go to state 17

  ! IMPLIES         [ reduce using rule 14 (formula -> formula IMPLIES formula .) ]
  ! AND             [ shift and go to state 15 ]
  ! OR              [ shift and go to state 16 ]


state 31

    (9) formula -> E L_SQUARE formula . U formula R_SQUARE
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    U               shift and go to state 34
    AND             shift and go to state 15
    OR              shift and go to state 16
    IMPLIES         shift and go to state 17


state 32

    (10) formula -> A L_SQUARE formula . U formula R_SQUARE
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    U               shift and go to state 35
    AND             shift and go to state 15
    OR              shift and go to state 16
    IMPLIES         shift and go to state 17


state 33

    (16) formula -> L_PAREN formula R_PAREN .

    AND             reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)
    OR              reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)
    IMPLIES         reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)
    $end            reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)
    R_PAREN         reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)
    U               reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)
    R_SQUARE        reduce using rule 16 (formula -> L_PAREN formula R_PAREN .)


state 34

    (9) formula -> E L_SQUARE formula U . formula R_SQUARE
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 36

state 35

    (10) formula -> A L_SQUARE formula U . formula R_SQUARE
    (1) formula -> . TRUE
    (2) formula -> . FALSE
    (3) formula -> . AG formula
    (4) formula -> . EG formula
    (5) formula -> . AX formula
    (6) formula -> . EX formula
    (7) formula -> . AF formula
    (8) formula -> . EF formula
    (9) formula -> . E L_SQUARE formula U formula R_SQUARE
    (10) formula -> . A L_SQUARE formula U formula R_SQUARE
    (11) formula -> . PROP_VARIABLE
    (12) formula -> . formula AND formula
    (13) formula -> . formula OR formula
    (14) formula -> . formula IMPLIES formula
    (15) formula -> . NOT formula
    (16) formula -> . L_PAREN formula R_PAREN

    TRUE            shift and go to state 2
    FALSE           shift and go to state 3
    AG              shift and go to state 4
    EG              shift and go to state 5
    AX              shift and go to state 6
    EX              shift and go to state 7
    AF              shift and go to state 8
    EF              shift and go to state 9
    E               shift and go to state 10
    A               shift and go to state 11
    PROP_VARIABLE   shift and go to state 12
    NOT             shift and go to state 13
    L_PAREN         shift and go to state 14

    formula                        shift and go to state 37

state 36

    (9) formula -> E L_SQUARE formula U formula . R_SQUARE
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    R_SQUARE        shift and go to state 38
    AND             shift and go to state 15
    OR              shift and go to state 16
    IMPLIES         shift and go to state 17


state 37

    (10) formula -> A L_SQUARE formula U formula . R_SQUARE
    (12) formula -> formula . AND formula
    (13) formula -> formula . OR formula
    (14) formula -> formula . IMPLIES formula

    R_SQUARE        shift and go to state 39
    AND             shift and go to state 15
    OR              shift and go to state 16
    IMPLIES         shift and go to state 17


state 38

    (9) formula -> E L_SQUARE formula U formula R_SQUARE .

    AND             reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)
    OR              reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)
    IMPLIES         reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)
    $end            reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)
    R_PAREN         reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)
    U               reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)
    R_SQUARE        reduce using rule 9 (formula -> E L_SQUARE formula U formula R_SQUARE .)


state 39

    (10) formula -> A L_SQUARE formula U formula R_SQUARE .

    AND             reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)
    OR              reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)
    IMPLIES         reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)
    $end            reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)
    R_PAREN         reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)
    U               reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)
    R_SQUARE        reduce using rule 10 (formula -> A L_SQUARE formula U formula R_SQUARE .)

