-- (*
-- Model Peterson's Algorithm for 2 processes and check mutual exclusion condition
-- 
-- asynchronous system
-- 
-- for i = 0, 1
-- 
-- the algorithm is
-- 
-- 0 : while(True){
-- 1 :     // non critical section
-- 2 :     intr[i] = True
-- 3 :     turn = 1 - i
-- 4 :     while(turn == 1 and intr[1 - i] == 1) // wait
-- 5 :     // critical section
-- 6 :     intr[i] = 0
-- 7 : }
-- transitions can be 12, 23, 34, 44, 45, 56, 61
-- 
-- *)

MODULE peterson_process(turn, id, other_intr)
VAR
	pc : 1..6;
	this_intr : 0..1;

INIT
	pc = 1 &
	this_intr = 0;

TRANS
	-- 12
	(
		pc = 1 &
		next(pc) = 2 &
		next(this_intr) = this_intr &
		next(turn) = turn
	) |

	-- 23
	(
		pc = 2 &
		next(pc) = 3 &
		next(this_intr) = 1 &
		next(turn) = turn
	) |

	-- 34
	(
		pc = 3 &
		next(pc) = 4 &
		next(turn) = 1 - id &
		next(this_intr) = this_intr
	) |

	-- 44
	(
		pc = 4 &
		turn = 1 - id &
		other_intr = 1 &
		next(pc) = 4 &
		next(turn) = turn &
		next(this_intr) = this_intr
	) |

	-- 45
	(
		pc = 4 &
		next(pc) = 5 &
		(turn = id | other_intr = 0) &
		next(turn) = turn &
		next(this_intr) = this_intr
	) |

	-- 56
	(
		pc = 5 &
		next(pc) = 6 &
		next(this_intr) = this_intr &
		next(turn) = turn
	) |

	-- 61
	(
		pc = 6 &
		next(pc) = 1 &
		next(this_intr) = 0 &
		next(turn) = turn
	);

FAIRNESS running

MODULE main
VAR
	turn : 0..1;

	a : process peterson_process(turn, 0, b.this_intr);
	b : process peterson_process(turn, 1, a.this_intr);

LTLSPEC
	-- Mutual exclusion
	G (a.pc != 5 | b.pc != 5)

LTLSPEC
	-- Starvation freeness for first process
	G ((a.pc = 4) -> F (a.pc = 5))

CTLSPEC
	-- No strict sequencing
	EF (
		a.pc = 5 &
		E[
			(a.pc = 5) U (
					!(a.pc = 5) &
					E [
						!(a.pc = 5 | b.pc = 5) U (a.pc = 5)
					]
			)
		]
	)

	
















